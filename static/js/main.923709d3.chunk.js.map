{"version":3,"sources":["components/contacts.js","App.js","serviceWorker.js","index.js"],"names":["Contacts","contacts","map","contact","className","key","id","name","email","company","catchPhrase","App","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qNAmBeA,EAjBE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACI,6BACI,gCAAQ,6CACPA,EAASC,KAAI,SAACC,GAAD,OACV,yBAAKC,UAAU,OAAOC,IAAKF,EAAQG,IAC/B,yBAAKF,UAAU,aACX,wBAAIA,UAAU,cAAcD,EAAQI,MACpC,wBAAIH,UAAU,iCAAiCD,EAAQK,OACvD,uBAAGJ,UAAU,aAAaD,EAAQM,QAAQC,oBC+EnDC,E,4MAtFbC,MAAQ,CACNX,SAAU,CAAC,CACT,GAAM,EACN,KAAQ,gBACR,SAAY,OACZ,MAAS,oBACT,QAAW,CACT,OAAU,cACV,MAAS,WACT,KAAQ,cACR,QAAW,aACX,IAAO,CACL,IAAO,WACP,IAAO,YAGX,MAAS,wBACT,QAAW,gBACX,QAAW,CACT,KAAQ,kBACR,YAAe,yCACf,GAAM,gCAGV,CACE,GAAM,EACN,KAAQ,eACR,SAAY,YACZ,MAAS,oBACT,QAAW,CACT,OAAU,gBACV,MAAS,YACT,KAAQ,cACR,QAAW,aACX,IAAO,CACL,IAAO,WACP,IAAO,aAGX,MAAS,sBACT,QAAW,gBACX,QAAW,CACT,KAAQ,eACR,YAAe,iCACf,GAAM,qCAGV,CACE,GAAM,EACN,KAAQ,mBACR,SAAY,WACZ,MAAS,qBACT,QAAW,CACT,OAAU,oBACV,MAAS,YACT,KAAQ,gBACR,QAAW,aACX,IAAO,CACL,IAAO,WACP,IAAO,aAGX,MAAS,iBACT,QAAW,cACX,QAAW,CACT,KAAQ,qBACR,YAAe,oCACf,GAAM,sC,uDAaV,OACE,kBAAC,EAAD,CAAUA,SAAUY,KAAKD,MAAMX,e,GAlFnBa,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.923709d3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Contacts = ({ contacts }) => {\r\n    return (\r\n        <div>\r\n            <center><h1>Contact List</h1></center>\r\n            {contacts.map((contact) => (\r\n                <div className=\"card\" key={contact.id}>\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{contact.name}</h5>\r\n                        <h6 className=\"card-subtitle mb-2 text-muted\">{contact.email}</h6>\r\n                        <p className=\"card-text\">{contact.company.catchPhrase}</p>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Contacts","import React, { Component } from 'react';\nimport Contacts from './components/contacts';\n\nclass App extends Component {\n  state = {\n    contacts: [{\n      \"id\": 1,\n      \"name\": \"Leanne Graham\",\n      \"username\": \"Bret\",\n      \"email\": \"Sincere@april.biz\",\n      \"address\": {\n        \"street\": \"Kulas Light\",\n        \"suite\": \"Apt. 556\",\n        \"city\": \"Gwenborough\",\n        \"zipcode\": \"92998-3874\",\n        \"geo\": {\n          \"lat\": \"-37.3159\",\n          \"lng\": \"81.1496\"\n        }\n      },\n      \"phone\": \"1-770-736-8031 x56442\",\n      \"website\": \"hildegard.org\",\n      \"company\": {\n        \"name\": \"Romaguera-Crona\",\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\n        \"bs\": \"harness real-time e-markets\"\n      }\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Ervin Howell\",\n      \"username\": \"Antonette\",\n      \"email\": \"Shanna@melissa.tv\",\n      \"address\": {\n        \"street\": \"Victor Plains\",\n        \"suite\": \"Suite 879\",\n        \"city\": \"Wisokyburgh\",\n        \"zipcode\": \"90566-7771\",\n        \"geo\": {\n          \"lat\": \"-43.9509\",\n          \"lng\": \"-34.4618\"\n        }\n      },\n      \"phone\": \"010-692-6593 x09125\",\n      \"website\": \"anastasia.net\",\n      \"company\": {\n        \"name\": \"Deckow-Crist\",\n        \"catchPhrase\": \"Proactive didactic contingency\",\n        \"bs\": \"synergize scalable supply-chains\"\n      }\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Clementine Bauch\",\n      \"username\": \"Samantha\",\n      \"email\": \"Nathan@yesenia.net\",\n      \"address\": {\n        \"street\": \"Douglas Extension\",\n        \"suite\": \"Suite 847\",\n        \"city\": \"McKenziehaven\",\n        \"zipcode\": \"59590-4157\",\n        \"geo\": {\n          \"lat\": \"-68.6102\",\n          \"lng\": \"-47.0653\"\n        }\n      },\n      \"phone\": \"1-463-123-4447\",\n      \"website\": \"ramiro.info\",\n      \"company\": {\n        \"name\": \"Romaguera-Jacobson\",\n        \"catchPhrase\": \"Face to face bifurcated interface\",\n        \"bs\": \"e-enable strategic applications\"\n      }\n    }]\n  }\n  /*componentDidMount() {\n    fetch('http://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ contacts: data })\n      })\n      .catch(console.log)\n  }*/\n  render() {\n    return (\n      <Contacts contacts={this.state.contacts} />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}